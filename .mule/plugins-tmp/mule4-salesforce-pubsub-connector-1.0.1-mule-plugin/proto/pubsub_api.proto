/*
 * Salesforce Pub/Sub API Version 1.
 */

syntax = "proto3";
package eventbus.v1;

option java_multiple_files = true;
option java_package = "com.mulesoft.connector.salesforce.pubsub.internal.protobuf";
option java_outer_classname = "PubSubProto";

/*
 * Uniquely identifies and describes the topic
 */
message TopicInfo {
  // Topic name
  string topic_name = 1;
  // Tenant GUID
  string tenant_guid = 2;
  // Is publishing allowed?
  bool can_publish = 3;
  // Is subscription allowed?
  bool can_subscribe = 4;
  /* Id of the current schema of the topic, which can be used for
   * publishing of generically serialized events.
   */
  string schema_id = 5;
}

/*
 * A request message for GetTopic. Note that tenant is not directly referenced
 * in the request, but is implicitly identified by the authentication headers.
 */
message TopicRequest {
  // The name of the topic to retrieve.
  string topic_name = 1;
}

/*
 * Header carry information for distributed tracing, filtering, routing etc.
 * For example, X-B3-* headers assigned by a publisher are stored with the event 
 * and can provide a full distributed trace of event across its entire 
 * lifecycle.
 */
message EventHeader {
  string key = 1;
  bytes value = 2;
}

/*
 * Event value that is created by an event producing application.
 */
message ProducerEvent {
  // The event's guid
  string id = 1;
  // Schema fingerprint for this event which is hash of the schema
  string schema_id = 2;
  // The message data field
  bytes payload = 3;
  // Key-value pairs of headers
  repeated EventHeader headers = 4;
}

/*
 * Event value with additional attribute assigned on consumption.
 */
message ConsumerEvent {
  ProducerEvent event = 1;
  /* The replay of the event. If stored by the consuming application, this 
   * allows for subscription durability by resuming after arbitrary points of 
   * the subscription stream on application restart.
   */
  bytes replay_id = 2;
}

/*
 * Publish result for an event. This will either have replay_id or publish 
 * error.
 */
message PublishResult {
  // Replay id for event
  bytes replay_id = 1;
  // Publish error if any
  Error error = 2;
}

message Error {
  // Error code
  ErrorCode code = 1;
  // Error message
  string msg = 2;
}

// Error codes supported
enum ErrorCode {
  UNKNOWN = 0;
  PUBLISH = 1;
}

/*
 * Supported Subscription Replay start values.
 * By default, the subscription will start at the tip of the stream if not 
 * specified.
 */
enum ReplayPreset {
  // Start subscription at tip of stream.
  LATEST = 0;
  // Start subscription at earliest point of stream.
  EARLIEST = 1;
  // Start after a custom point in stream. This must be set with a valid 
  // replay_id in the FetchRequest.
  CUSTOM = 2;
}

/*
 * Request for the Subscribe streaming RPC method. This request is used to:
 * 1. Establish the initial subscribe stream.
 * 2. Request more events from the subscription stream.
 * Flow Control is handled by subscriber via num_requested.
 * A client can specify starting point of subscription with replay_preset and 
 * replay_id combinations. If no replay_preset is specified, the subscription 
 * starts at LATEST (tip of stream). replay_preset and replay_id values will 
 * only be consumed as part of the first FetchRequest. If a client needs to 
 * start at another point in the stream, it will need to start a new 
 * subscription.
 */
message FetchRequest {
  /*
   * Identifies a topic for subscription in the very first FetchRequest of the 
   * stream. Topic cannot change in subsequent FetchRequests within the same 
   * subscribe stream, but can be omitted for efficiency.
   */
  string topic_name = 1;

  /*
   * Subscription starting point. This will only be consumed as part of the 
   * first FetchRequest to set up the subscription.
   */
  ReplayPreset replay_preset = 2;
  /*
   * If replay_preset of CUSTOM is selected, specify the position of 
   * subscription to start after. This will only be consumed as part of the 
   * first FetchRequest to set up the subscription.
   */
  bytes replay_id = 3;
  /*
   * Maximum number of events a client is ready to accept. Each subsequent 
   * FetchRequest informs the server of additional processing capacity available 
   * on the client side. For a single FetchRequest, the API will return 
   * <= num_requested events, though they may arrive in multiple FetchResponse 
   * messages.
   */
  int32 num_requested = 4;
  // Authentication refresh token if applicable
  string auth_refresh = 5;
}

/*
 * Response for the Subscribe streaming RPC method. This returns
 * ConsumerEvent(s).
 * If there are no events to deliver, the server sends an empty batch fetch 
 * response with the latest replay id. The empty fetch response is sent within 
 * 270 seconds. An empty fetch response provides a periodic keepalive from the
 * server and the latest replay id.
 */
message FetchResponse {
  // Received events for subscription for client consumption
  repeated ConsumerEvent events = 1;
  // Latest replay id of a subscription. Enables clients with an updated replay 
  // value so that they can keep track of their last consumed replay. Clients 
  // will not have to start a subscription at a very old replay in the case 
  // where a resubscribe is necessary.
  bytes latest_replay_id = 2;
}

/*
 * Request for the GetSchema RPC method. This requests for the Schema of an 
 * event based on SchemaId.
 */
message SchemaRequest {
  // Schema fingerprint for this event which is hash of the schema
  string schema_id = 1;
}

/*
 * Response for the GetSchema RPC method. This returns the Schema Id
 * and Schema of an event.
 */
message SchemaInfo {
  // Avro schema in JSON format
  string schema_json = 1;
  // Schema fingerprint
  string schema_id = 2;
}

// Request for the Publish and PublishStream RPC method.
message PublishRequest {
  // Topic to publish on
  string topic_name = 1;
  // Batch of ProducerEvent(s) to send
  repeated ProducerEvent events = 2;
  // Authentication refresh token if applicable
  string auth_refresh = 3;
}

/*
 * Response for the Publish and PublishStream RPC methods. This returns
 * a list of PublishResults for each event that the client wanted to
 * publish. The PublishResult indicates if publish succeeded or not
 * for each event. It also returns the schemaId which was used to create
 * the ProducerEvents in the PublishRequest.
 */
message PublishResponse {
  // Publish results
  repeated PublishResult results = 1;
  // Schema fingerprint for this event which is a hash of the schema
  string schema_id = 2;
}

/*
 * The Pub/Sub API provides a single interface for publishing and subscribing 
 * to platform events, including real-time event monitoring events, and change 
 * data capture events. The Pub/Sub API is a gRPC API that is based on HTTP 2.
 *
 * A session token is needed to authenticate. Any of the Salesforce supported 
 * OAuth flows can be used to obtain a session token: 
 * https://help.salesforce.com/articleView?id=sf.remoteaccess_oauth_flows.htm&type=5
 *
 * For each RPC, a client needs to pass authentication information as metadata 
 * headers (https://www.grpc.io/docs/guides/concepts/#metadata) 
 * with each method call.
 *
 * For SFDC session token authentication, use:
 *   x-sfdc-api-session-token : SFDC session token
 *   x-sfdc-instance-url : Salesforce instance URL
 *   x-sfdc-tenant-id : tenant id of the client
 *
 * StatusException is thrown in case of response failure for every kind of 
 * request.
 */
service PubSub {
  /*
   * Bidirectional streaming RPC to subscribe to a Topic. The subscription is 
   * pull-based. A client can request for more events as it consumes events. 
   * This enables a client to handle flow control.
   *
   * Typical flow:
   * 1. Client requests for X number of events via FetchRequest.
   * 2. Server receives request and delivers events until X events are delivered 
   *    to client via one ore more FetchResponse messages.
   * 3. Client consumes the FetchResponse messages as they come.
   * 4. Client issues new FetchRequest for Y more number of events. This request 
   *    can come before the server has delivered the earlier requested X number 
   *    of events so the client gets a continuous stream of events if any.
   *
   * If a client requests for more events before the server finishes the last
   * requested amount, the server will append the new amount to the current 
   * amount of events it still needs to fetch and deliver.
   *
   * A client can subscribe at any position in the stream by providing a replay 
   * option in the first FetchRequest. The replay option is honored for the 
   * first FetchRequest received from a client. Any subsequent FetchRequests 
   * with a new replay option are ignored. A client needs to call the Subscribe 
   * RPC again to restart the subscription at a new position in the stream.
   *
   * The first FetchRequest of the stream identifies the topic to subscribe to.
   * If any subsequent FetchRequest provides topic_name, it must match what
   * was provided in the first FetchRequest; otherwise the RPC will error
   * with INVALID_ARGUMENT status.
   */
  rpc Subscribe (stream FetchRequest) returns (stream FetchResponse);

  // Get Event Schema for topic based on Schema Id.
  rpc GetSchema (SchemaRequest) returns (SchemaInfo);

  /*
   * Get the Topic Information related to topic.
   */
  rpc GetTopic (TopicRequest) returns (TopicInfo);

  /*
   * Send publish request to synchronously publish events to topic.
   */
  rpc Publish (PublishRequest) returns (PublishResponse);

  /*
   * Bidirectional Streaming RPC to publish events to the Event Bus.
   * PublishRequest contains the batch of events to publish.
   *
   * The first PublishRequest of the stream identifies the topic to publish on.
   * If any subsequent PublishRequest provides topic_name, it must match what
   * was provided in the first PublishRequest; otherwise, the RPC will error
   * with INVALID_ARGUMENT status.
   *
   * The server will return a PublishResponse for each PublishRequest when 
   * publish is complete for the batch. A client does not have to wait for a 
   * PublishResponse before sending a new PublishRequest, i.e. multiple publish 
   * batches can be queued up, which allows for higher publish rate as a client 
   * can asynchronously publish more events while publishes are still in flight 
   * on the server side.
   *
   * PublishResponse holds a PublishResult for each event published that 
   * indicates success or failure of the publish. A client can then retry the 
   * publish as needed before sending more PublishRequests for new events to 
   * publish.
   *
   * A client must send a valid publish request with one or more events every 70 
   * seconds to hold on to the stream. Otherwise, the server closes the stream 
   * and notifies the client. Once the client is notified of the stream closure,
   * it must make a new PublishStream call to resume publishing.
   *
   */
  rpc PublishStream (stream PublishRequest) returns (stream PublishResponse);
}

// Style guide: https://developers.google.com/protocol-buffers/docs/style
